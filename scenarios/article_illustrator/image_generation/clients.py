"""Image generation API clients."""

import asyncio
import base64
import os
from pathlib import Path
from typing import Protocol

import aiohttp

try:
    from google import genai  # type: ignore[import-not-found]
    from google.genai import types  # type: ignore[import-not-found]

    GENAI_AVAILABLE = True
except ImportError:
    genai = None  # type: ignore[assignment]
    types = None  # type: ignore[assignment]
    GENAI_AVAILABLE = False
from openai import AsyncOpenAI

from amplifier.utils.logger import get_logger

logger = get_logger(__name__)


class ImageGeneratorProtocol(Protocol):
    """Protocol for image generation API clients."""

    api_name: str

    async def generate(
        self,
        prompt: str,
        output_path: Path,
        params: dict | None = None,
    ) -> tuple[str, float]:
        """Generate an image from a prompt.

        Args:
            prompt: Text prompt for image generation
            output_path: Where to save the generated image
            params: Optional generation parameters

        Returns:
            Tuple of (image_url, cost_estimate)
        """
        ...

    async def check_availability(self) -> bool:
        """Check if the API is available and configured."""
        ...


class ImagenClient:
    """Client for Google's image generation via Gemini API."""

    api_name = "imagen"
    COST_PER_IMAGE = 0.035  # ~$0.03-0.04 per image

    def __init__(self):
        self.api_key = os.getenv("GOOGLE_API_KEY")
        # Check if API key is actually present and not empty
        self.configured = bool(self.api_key and self.api_key.strip() and GENAI_AVAILABLE)
        self.client = None
        if self.configured and genai:
            try:
                self.client = genai.Client(api_key=self.api_key)
            except Exception as e:
                logger.warning(f"Failed to initialize Google client: {e}")
                self.configured = False
                self.client = None

    async def generate(
        self,
        prompt: str,
        output_path: Path,
        params: dict | None = None,
    ) -> tuple[str, float]:
        """Generate image using Google Gemini API.

        Uses Imagen 4 for generation.

        Args:
            prompt: Text description of the image to generate
            output_path: Path where the generated image should be saved
            params: Optional parameters

        Returns:
            Tuple of (image_url, estimated_cost)

        Raises:
            ValueError: If API key not configured or service unavailable
        """
        if not self.configured or not self.client:
            raise ValueError("Google API key not configured. Please set GOOGLE_API_KEY environment variable.")

        logger.info(f"Generating Google image with prompt: {prompt[:100]}...")

        try:
            # Run the synchronous API call in a thread pool executor to avoid blocking
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, self._generate_sync, prompt)

            # Get the first generated image
            if not response.generated_images:
                raise ValueError("No images generated by Google API")

            generated_image = response.generated_images[0]

            # Save the image
            output_path.parent.mkdir(parents=True, exist_ok=True)

            # The image data is in generated_image.image.image_bytes
            image_data = generated_image.image.image_bytes
            output_path.write_bytes(image_data)

            logger.info(f"Image saved to: {output_path}")
            logger.info(f"Estimated cost: ${self.COST_PER_IMAGE:.3f}")

            # Return local file URL and cost
            return f"file://{output_path}", self.COST_PER_IMAGE

        except Exception as e:
            logger.error(f"Failed to generate image with Google: {e}")
            raise

    def _generate_sync(self, prompt: str):
        """Synchronous helper for generating images."""
        if not self.client or not types:
            raise RuntimeError("Google API client not initialized")

        # Generate image using Imagen 4
        # Available models: "imagen-4.0-generate-001"
        return self.client.models.generate_images(
            model="imagen-4.0-generate-001",
            prompt=prompt,
            config=types.GenerateImagesConfig(
                number_of_images=1,
                aspect_ratio="1:1",  # 1024x1024 equivalent
                safety_filter_level=types.SafetyFilterLevel.BLOCK_LOW_AND_ABOVE,  # Use enum value
                include_rai_reason=False,  # Don't need rejection reasons
            ),
        )

    async def check_availability(self) -> bool:
        """Check if Google API is configured.

        Returns:
            True if API key is configured, False otherwise
        """
        if not self.configured:
            logger.warning("Google API not configured - missing GOOGLE_API_KEY")
            return False

        if not self.client:
            return False

        try:
            # Try a simple API call to verify the key works
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self.client.models.list)
            logger.info("Google Imagen API is available and configured.")
            return True
        except Exception as e:
            logger.warning(f"Google API key configured but API check failed: {e}")
            return False


class DalleClient:
    """Client for OpenAI DALL-E API."""

    api_name = "dalle"

    # DALL-E 3 pricing (as of 2024)
    COST_PER_IMAGE = {
        "standard": 0.040,  # $0.04 per image at 1024x1024
        "hd": 0.080,  # $0.08 per image at 1024x1024 HD quality
    }

    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.configured = bool(self.api_key)
        self.client = None
        if self.configured:
            self.client = AsyncOpenAI(api_key=self.api_key)

    async def generate(
        self,
        prompt: str,
        output_path: Path,
        params: dict | None = None,
    ) -> tuple[str, float]:
        """Generate an image using DALL-E 3.

        Args:
            prompt: Text description of the image to generate
            output_path: Path where the generated image should be saved
            params: Optional parameters (quality, style, etc.)

        Returns:
            Tuple of (image_url, estimated_cost)

        Raises:
            ValueError: If API key not configured
            Exception: For API or download errors
        """
        if not self.configured or not self.client:
            raise ValueError("OpenAI API key not configured. Please set OPENAI_API_KEY environment variable.")

        # Extract parameters with defaults
        params = params or {}
        quality = params.get("quality", "standard")
        style = params.get("style", "natural")
        size = params.get("size", "1024x1024")

        logger.info(f"Generating DALL-E image with prompt: {prompt[:100]}...")
        logger.info(f"Parameters: quality={quality}, style={style}, size={size}")

        try:
            # Generate image using DALL-E 3
            response = await self.client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size=size,
                quality=quality,  # type: ignore[arg-type]
                style=style,
                n=1,  # DALL-E 3 only supports n=1
            )

            # Get the image URL from response
            image_url = response.data[0].url if response.data else None
            if not image_url:
                raise ValueError("No image URL returned from DALL-E API")

            logger.info(f"Image generated successfully. Downloading from: {image_url[:80]}...")

            # Download and save the image
            await self._download_image(image_url, output_path)

            # Calculate cost based on quality
            cost = self.COST_PER_IMAGE.get(quality, self.COST_PER_IMAGE["standard"])

            logger.info(f"Image saved to: {output_path}")
            logger.info(f"Estimated cost: ${cost:.3f}")

            return image_url, cost

        except Exception as e:
            logger.error(f"Failed to generate image with DALL-E: {e}")
            raise

    async def _download_image(self, url: str, output_path: Path) -> None:
        """Download image from URL and save to path.

        Args:
            url: URL of the image to download
            output_path: Path where the image should be saved
        """
        output_path.parent.mkdir(parents=True, exist_ok=True)

        async with (
            aiohttp.ClientSession() as session,
            session.get(url) as response,
        ):
            response.raise_for_status()
            content = await response.read()
            output_path.write_bytes(content)

    async def check_availability(self) -> bool:
        """Check if DALL-E API is configured.

        Returns:
            True if API key is configured, False otherwise
        """
        if not self.configured:
            logger.warning("DALL-E API not configured - missing OPENAI_API_KEY")
            return False

        return True


class GptImageClient:
    """Client for OpenAI GPT-Image-1 API."""

    api_name = "gptimage"

    # GPT-Image-1 pricing (as of 2025)
    COST_PER_IMAGE = {
        "low": 0.020,  # $0.02 per image at 1024x1024 low quality
        "medium": 0.040,  # $0.04 per image at 1024x1024 medium quality
        "high": 0.080,  # $0.08 per image at 1024x1024 high quality
        "auto": 0.040,  # $0.04 per image at 1024x1024 auto quality (default)
    }

    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.configured = bool(self.api_key)
        self.client = None
        if self.configured:
            self.client = AsyncOpenAI(api_key=self.api_key)

    async def generate(
        self,
        prompt: str,
        output_path: Path,
        params: dict | None = None,
    ) -> tuple[str, float]:
        """Generate an image using GPT-Image-1.

        Args:
            prompt: Text description of the image to generate
            output_path: Path where the generated image should be saved
            params: Optional parameters (quality, size)

        Returns:
            Tuple of (image_url, estimated_cost)

        Raises:
            ValueError: If API key not configured
            Exception: For API or download errors
        """
        if not self.configured or not self.client:
            raise ValueError("OpenAI API key not configured. Please set OPENAI_API_KEY environment variable.")

        # Extract parameters with defaults
        params = params or {}
        # Map standard DALL-E quality values to GPT-Image-1 values
        quality_param = params.get("quality", "standard")
        quality = {"standard": "medium", "hd": "high"}.get(quality_param, quality_param)
        size = params.get("size", "1024x1024")

        logger.info(f"Generating GPT-Image-1 image with prompt: {prompt[:100]}...")
        logger.info(f"Parameters: quality={quality}, size={size}")

        try:
            # Generate image using GPT-Image-1
            # Note: GPT-Image-1 always returns base64-encoded images (no response_format needed)
            response = await self.client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                size=size,
                quality=quality,  # type: ignore[arg-type]
                n=1,  # GPT-Image-1 only supports n=1
            )

            # Get the base64-encoded image data
            if not response.data or len(response.data) == 0:
                raise ValueError("No image data returned from GPT-Image-1 API")

            b64_data = response.data[0].b64_json
            if not b64_data:
                raise ValueError("No base64 image data in GPT-Image-1 response")

            logger.info("Image generated successfully. Decoding base64 data...")

            # Decode base64 and save the image
            image_bytes = base64.b64decode(b64_data)

            # Ensure parent directory exists
            output_path.parent.mkdir(parents=True, exist_ok=True)

            # Save image data
            output_path.write_bytes(image_bytes)

            # Calculate cost based on quality
            cost = self.COST_PER_IMAGE.get(quality if quality else "auto", self.COST_PER_IMAGE["auto"])

            logger.info(f"Image saved to: {output_path}")
            logger.info(f"Estimated cost: ${cost:.3f}")

            # Return local file URL and cost
            return f"file://{output_path}", cost

        except Exception as e:
            logger.error(f"Failed to generate image with GPT-Image-1: {e}")
            raise

    async def check_availability(self) -> bool:
        """Check if GPT-Image-1 API is configured.

        Returns:
            True if API key is configured, False otherwise
        """
        if not self.configured:
            logger.warning("GPT-Image-1 API not configured - missing OPENAI_API_KEY")
            return False

        return True
